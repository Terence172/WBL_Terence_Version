@model IEnumerable<AlphaZero.Models.floor>

@{
    ViewBag.Title = "Floors";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <style>
        .container {

        }

        .resize-drag {
            position: absolute;
            width: 100px;
            height: 100px;
            background-color: rgba(255, 2, 2, 0.8);
            cursor: move;
            border: 2px solid #0B132B;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            color: #0B132B;
            text-align: center;
            padding: 10px;
            font-size: 16px;
        }


        .overlay {
            position: absolute;
            top: 10px;
            left: 50%;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 999;
        }

        .button-container {
            position: relative;
            z-index: 1000;
            pointer-events: auto;
        }
    </style>
</head>


<div class="page-header">
    <div class="row">

        <div class="col-md-6 col-sm-12">
            <div class="title">
                <h4>Room - View</h4>
            </div>
            <nav aria-label="breadcrumb" role="navigation">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Rooms in </li>
                </ol>
            </nav>
        </div>

        <div class="col-md-6 col-sm-12 text-right">
            <div class="dropdown">
                <a class="btn btn-primary" href="@Url.Action("Create", "floorsCropper")" role="button">
                    Create Room
                </a>
            </div>
        </div>
    </div>
</div>



<div class="row">
    <div class="col-xl-6 mb-30">
        <div class="card-box pd-20" id="container" style="height: 800px; background-image: url('@Url.Content("~/Content/assets/src/images/DL1 layout.jpg")'); background-size: contain; background-position: center; background-repeat: no-repeat;">


            <div class="container" >
                <div id="resizable" class="resize-drag">
                    <!-- Content of the resizable div <p class="action-link" data-url="@Url.Action("Index", "Notification")">I am Draggable and Resizable</p> -->
                    <p class="text-dark">I am a Room</p>
                </div>
            </div>


        </div>
    </div>
    <div class="col-xl-6 mb-30">
        <div class="card-box height-100-p pd-20">


            <h2 class="h4 mb-20">Lead Target</h2>
            <div id="chart6"></div>


        </div>
    </div>
</div>

        
        <div class="overlay">
            <div class="button-container">
                <button onclick="copyContainerInfo()">Copy Container Info</button>
                <input type="text" id="pasteInput">
                <button onclick="pasteContainerInfo()">Paste Container Info</button>
            </div>
        </div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    var jq = jQuery.noConflict();

    jq(document).ready(function () {
        jq("#resizable").resizable();
    });

    // Make the resizable div draggable
    dragElement(document.getElementById("resizable"));

    function dragElement(element) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        element.onmousedown = dragMouseDown;

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            element.style.top = (element.offsetTop - pos2) + "px";
            element.style.left = (element.offsetLeft - pos1) + "px";
        }

        function closeDragElement() {
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }

    function copyContainerInfo1() {
        var resizable = document.getElementById("resizable");

        var containerInfo = {
            resizableLeft: resizable.offsetLeft,
            resizableTop: resizable.getBoundingClientRect().top,
            resizableWidth: resizable.offsetWidth,
            resizableHeight: resizable.getBoundingClientRect().height
        };

        var containerInfoString = JSON.stringify(containerInfo);
        navigator.clipboard.writeText(containerInfoString);
    }

    function copyContainerInfo2() {
        var resizable = document.getElementById("resizable");
        var containerInfo = {
            resizableLeft: resizable.offsetLeft,
            resizableTop: resizable.offsetTop,
            resizableWidth: resizable.offsetWidth,
            resizableHeight: resizable.offsetHeight
        };
        var containerInfoString = JSON.stringify(containerInfo);
        navigator.clipboard.writeText(containerInfoString);
    }




    function copyContainerInfo() {
        var container = document.getElementById("container");
        var resizable = document.getElementById("resizable");

        var containerWidth = container.offsetWidth;
        var containerHeight = container.offsetHeight;

        var resizableLeft = (resizable.offsetLeft / containerWidth) * 100;
        var resizableTop = (resizable.offsetTop / containerHeight) * 100;
        var resizableWidth = (resizable.offsetWidth / containerWidth) * 100;
        var resizableHeight = (resizable.offsetHeight / containerHeight) * 100;

        var containerInfo = {
            resizableLeft: resizableLeft,
            resizableTop: resizableTop,
            resizableWidth: resizableWidth,
            resizableHeight: resizableHeight
        };

        var containerInfoString = JSON.stringify(containerInfo);
        navigator.clipboard.writeText(containerInfoString);
    }

    function pasteContainerInfo() {
        var pasteInput = document.getElementById("pasteInput");
        var containerInfoString = pasteInput.value;
        if (!containerInfoString) return;

        var containerInfo = JSON.parse(containerInfoString);

        var resizable = document.getElementById("resizable");
        var container = document.getElementById("container");

        var containerWidth = container.offsetWidth;
        var containerHeight = container.offsetHeight;

        var resizableLeft = (containerInfo.resizableLeft / 100) * containerWidth;
        var resizableTop = (containerInfo.resizableTop / 100) * containerHeight;
        var resizableWidth = (containerInfo.resizableWidth / 100) * containerWidth;
        var resizableHeight = (containerInfo.resizableHeight / 100) * containerHeight;

        resizable.style.left = resizableLeft + "px";
        resizable.style.top = resizableTop + "px";
        resizable.style.width = resizableWidth + "px";
        resizable.style.height = resizableHeight + "px";
    }







    function pasteContainerInfo1() {
        var pasteInput = document.getElementById("pasteInput");
        var containerInfoString = pasteInput.value;
        if (!containerInfoString) return;

        var containerInfo = JSON.parse(containerInfoString);
        var resizable = document.getElementById("resizable");

        resizable.style.left = containerInfo.resizableLeft + "%";
        resizable.style.top = containerInfo.resizableTop + "%";
        resizable.style.width = containerInfo.resizableWidth + "%";
        resizable.style.height = containerInfo.resizableHeight + "%";
    }

   

    function pasteContainerInfo2() {
        var pasteInput = document.getElementById("pasteInput");
        var containerInfoString = pasteInput.value;
        if (!containerInfoString) return;

        var containerInfo = JSON.parse(containerInfoString);
        var resizable = document.getElementById("resizable");
        resizable.style.left = containerInfo.resizableLeft + "px";
        resizable.style.top = containerInfo.resizableTop + "px";
        resizable.style.width = containerInfo.resizableWidth + "px";
        resizable.style.height = containerInfo.resizableHeight + "px";
    }


</script>





<!--
    <div class="container">
        <img src="~/Content/assets/src/images/DL1 layout.jpg" alt="Floor Plan">
        <div class="floor-plan" id="divResize">
            <p class="action-link" data-url="@Url.Action("Index", "Notification")">I am Draggable and Resizable</p>
        </div>
    </div>
-->
<script>

    // Use jQuery.noConflict() and assign the jQuery object to a different variable
    /*var jq = jQuery.noConflict();

    jq(document).ready(function () {

        jq('#divContainer').draggable();
        jq("#divResize").draggable().resizable();

        // Create more DIV elements with absolute positioning.
        jq('#btClickMe').click(function () {

            var dynamic_div = jq('<div>
    ').css({
    border: '1px dashed', position: 'absolute', left: element_pos,
    top: jq('#divContainer').height() + 20,
    width: '120', height: '120', padding: '3', margin: '0'
    });

    element_pos = element_pos + jq('#divContainer').width() + 20;

    dynamic_div.append('You can drag me too');

    // Append the newly created DIV to the container.
    dynamic_div.appendTo('#divContainer').draggable();

    iCnt = iCnt + 1;
    });
    });*/
</script>










<!--<div id="divContainer">
    I am Draggable
</div>

<input type='button'
       style='float:left'
       id='btClickMe'
       value='Create more draggable DIVs' />-->
@*

    <h2>Index</h2>

    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.floor_modemIP)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.floor_cctvQr)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.floor_layout)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.landlord.landlord_name)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.floor_modemIP)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.floor_cctvQr)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.floor_layout)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.landlord.landlord_name)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.floor_id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.floor_id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.floor_id })
                </td>
            </tr>
        }

    </table>

*@
